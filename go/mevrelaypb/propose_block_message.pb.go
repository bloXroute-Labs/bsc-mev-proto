// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.3
// source: propose_block_message.proto

package mevrelaypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a request to propose a new block.
type ProposeBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The raw bid to propose.
	RawBid *RawBid `protobuf:"bytes,1,opt,name=raw_bid,json=rawBid,proto3" json:"raw_bid,omitempty"`
	// The payment transaction for the bid.
	PayBidTx []byte `protobuf:"bytes,2,opt,name=pay_bid_tx,json=payBidTx,proto3" json:"pay_bid_tx,omitempty"`
	// The gas used for the payment transaction.
	PayBidTxGasUsed *BigInt `protobuf:"bytes,3,opt,name=pay_bid_tx_gas_used,json=payBidTxGasUsed,proto3" json:"pay_bid_tx_gas_used,omitempty"`
	// The ID of the block proposal.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// The validator wallet address.
	Validator string `protobuf:"bytes,5,opt,name=validator,proto3" json:"validator,omitempty"`
	// The hashes of the bundles in the block.
	BundleHashes *Hashes `protobuf:"bytes,6,opt,name=bundle_hashes,json=bundleHashes,proto3" json:"bundle_hashes,omitempty"`
	// Bloxroute profit (optional)
	BloxrouteProfit *BigInt `protobuf:"bytes,7,opt,name=bloxroute_profit,json=bloxrouteProfit,proto3" json:"bloxroute_profit,omitempty"`
}

func (x *ProposeBlockRequest) Reset() {
	*x = ProposeBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_propose_block_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeBlockRequest) ProtoMessage() {}

func (x *ProposeBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_propose_block_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeBlockRequest.ProtoReflect.Descriptor instead.
func (*ProposeBlockRequest) Descriptor() ([]byte, []int) {
	return file_propose_block_message_proto_rawDescGZIP(), []int{0}
}

func (x *ProposeBlockRequest) GetRawBid() *RawBid {
	if x != nil {
		return x.RawBid
	}
	return nil
}

func (x *ProposeBlockRequest) GetPayBidTx() []byte {
	if x != nil {
		return x.PayBidTx
	}
	return nil
}

func (x *ProposeBlockRequest) GetPayBidTxGasUsed() *BigInt {
	if x != nil {
		return x.PayBidTxGasUsed
	}
	return nil
}

func (x *ProposeBlockRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProposeBlockRequest) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *ProposeBlockRequest) GetBundleHashes() *Hashes {
	if x != nil {
		return x.BundleHashes
	}
	return nil
}

func (x *ProposeBlockRequest) GetBloxrouteProfit() *BigInt {
	if x != nil {
		return x.BloxrouteProfit
	}
	return nil
}

// ProposeBlockResponse message containing the response to the block proposal.
type ProposeBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UUID of the block proposal.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The account ID of the builder.
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The received time of the block proposal.
	ReceivedTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	// The reply to the block proposal.
	//
	// Types that are assignable to Reply:
	//	*ProposeBlockResponse_ValidatorReply
	//	*ProposeBlockResponse_Error
	//	*ProposeBlockResponse_BestBid
	Reply isProposeBlockResponse_Reply `protobuf_oneof:"reply"`
}

func (x *ProposeBlockResponse) Reset() {
	*x = ProposeBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_propose_block_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeBlockResponse) ProtoMessage() {}

func (x *ProposeBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_propose_block_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeBlockResponse.ProtoReflect.Descriptor instead.
func (*ProposeBlockResponse) Descriptor() ([]byte, []int) {
	return file_propose_block_message_proto_rawDescGZIP(), []int{1}
}

func (x *ProposeBlockResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ProposeBlockResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ProposeBlockResponse) GetReceivedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedTime
	}
	return nil
}

func (m *ProposeBlockResponse) GetReply() isProposeBlockResponse_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (x *ProposeBlockResponse) GetValidatorReply() *ValidatorReply {
	if x, ok := x.GetReply().(*ProposeBlockResponse_ValidatorReply); ok {
		return x.ValidatorReply
	}
	return nil
}

func (x *ProposeBlockResponse) GetError() string {
	if x, ok := x.GetReply().(*ProposeBlockResponse_Error); ok {
		return x.Error
	}
	return ""
}

func (x *ProposeBlockResponse) GetBestBid() *BestBidUpdate {
	if x, ok := x.GetReply().(*ProposeBlockResponse_BestBid); ok {
		return x.BestBid
	}
	return nil
}

type isProposeBlockResponse_Reply interface {
	isProposeBlockResponse_Reply()
}

type ProposeBlockResponse_ValidatorReply struct {
	// The validator reply to the block proposal.
	ValidatorReply *ValidatorReply `protobuf:"bytes,4,opt,name=validator_reply,json=validatorReply,proto3,oneof"`
}

type ProposeBlockResponse_Error struct {
	// The error message in case of an error.
	Error string `protobuf:"bytes,5,opt,name=error,proto3,oneof"`
}

type ProposeBlockResponse_BestBid struct {
	// The update about a better bid arrival
	BestBid *BestBidUpdate `protobuf:"bytes,6,opt,name=best_bid,json=bestBid,proto3,oneof"`
}

func (*ProposeBlockResponse_ValidatorReply) isProposeBlockResponse_Reply() {}

func (*ProposeBlockResponse_Error) isProposeBlockResponse_Reply() {}

func (*ProposeBlockResponse_BestBid) isProposeBlockResponse_Reply() {}

type BestBidUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockReward     *BigInt                `protobuf:"bytes,1,opt,name=block_reward,json=blockReward,proto3" json:"block_reward,omitempty"`
	ReceivedTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	BlockNumber     uint64                 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BloxrouteProfit *BigInt                `protobuf:"bytes,4,opt,name=bloxroute_profit,json=bloxrouteProfit,proto3" json:"bloxroute_profit,omitempty"`
}

func (x *BestBidUpdate) Reset() {
	*x = BestBidUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_propose_block_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BestBidUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BestBidUpdate) ProtoMessage() {}

func (x *BestBidUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_propose_block_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BestBidUpdate.ProtoReflect.Descriptor instead.
func (*BestBidUpdate) Descriptor() ([]byte, []int) {
	return file_propose_block_message_proto_rawDescGZIP(), []int{2}
}

func (x *BestBidUpdate) GetBlockReward() *BigInt {
	if x != nil {
		return x.BlockReward
	}
	return nil
}

func (x *BestBidUpdate) GetReceivedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedTime
	}
	return nil
}

func (x *BestBidUpdate) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *BestBidUpdate) GetBloxrouteProfit() *BigInt {
	if x != nil {
		return x.BloxrouteProfit
	}
	return nil
}

// ValidatorReply message containing details about the block proposal reception.
type ValidatorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The duration it took to send the block proposal.
	SendingDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=sending_duration,json=sendingDuration,proto3" json:"sending_duration,omitempty"`
	// The time the block proposal was sent.
	SentTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=sent_time,json=sentTime,proto3" json:"sent_time,omitempty"`
	// The reply to the block proposal.
	Reply string `protobuf:"bytes,6,opt,name=reply,proto3" json:"reply,omitempty"`
	// The timestamp of the reply.
	ReplyTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=reply_timestamp,json=replyTimestamp,proto3" json:"reply_timestamp,omitempty"`
}

func (x *ValidatorReply) Reset() {
	*x = ValidatorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_propose_block_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorReply) ProtoMessage() {}

func (x *ValidatorReply) ProtoReflect() protoreflect.Message {
	mi := &file_propose_block_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorReply.ProtoReflect.Descriptor instead.
func (*ValidatorReply) Descriptor() ([]byte, []int) {
	return file_propose_block_message_proto_rawDescGZIP(), []int{3}
}

func (x *ValidatorReply) GetSendingDuration() *durationpb.Duration {
	if x != nil {
		return x.SendingDuration
	}
	return nil
}

func (x *ValidatorReply) GetSentTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SentTime
	}
	return nil
}

func (x *ValidatorReply) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

func (x *ValidatorReply) GetReplyTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ReplyTimestamp
	}
	return nil
}

var File_propose_block_message_proto protoreflect.FileDescriptor

var file_propose_block_message_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x63,
	0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x78, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x62, 0x73, 0x63,
	0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x62,
	0x69, 0x67, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x72, 0x61, 0x77, 0x5f, 0x62, 0x69,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x98, 0x03, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x5f, 0x62,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62,
	0x6c, 0x6f, 0x78, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x62, 0x73, 0x63, 0x2e, 0x6d, 0x65, 0x76,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x69, 0x64,
	0x52, 0x06, 0x72, 0x61, 0x77, 0x42, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f,
	0x62, 0x69, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61,
	0x79, 0x42, 0x69, 0x64, 0x54, 0x78, 0x12, 0x54, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x69,
	0x64, 0x5f, 0x74, 0x78, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x78, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x62, 0x73, 0x63, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x61, 0x79,
	0x42, 0x69, 0x64, 0x54, 0x78, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x0d, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x78, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x62, 0x73, 0x63, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x0c, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x78, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x78, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x62, 0x73, 0x63, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x78, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x22, 0xd2, 0x02, 0x0a, 0x14, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x78, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x62, 0x73, 0x63, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x48, 0x00, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x08, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x78, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x62, 0x73, 0x63,
	0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65,
	0x73, 0x74, 0x42, 0x69, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62,
	0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x91, 0x02, 0x0a, 0x0d, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x49, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6c,
	0x6f, 0x78, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x62, 0x73, 0x63, 0x2e, 0x6d, 0x65, 0x76, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x51, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x78, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x62, 0x6c, 0x6f, 0x78, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x62, 0x73, 0x63, 0x2e, 0x6d,
	0x65, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49,
	0x6e, 0x74, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x78, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x22, 0xea, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x0f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62,
	0x6c, 0x6f, 0x58, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x73,
	0x63, 0x2d, 0x6d, 0x65, 0x76, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x6d,
	0x65, 0x76, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_propose_block_message_proto_rawDescOnce sync.Once
	file_propose_block_message_proto_rawDescData = file_propose_block_message_proto_rawDesc
)

func file_propose_block_message_proto_rawDescGZIP() []byte {
	file_propose_block_message_proto_rawDescOnce.Do(func() {
		file_propose_block_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_propose_block_message_proto_rawDescData)
	})
	return file_propose_block_message_proto_rawDescData
}

var file_propose_block_message_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_propose_block_message_proto_goTypes = []interface{}{
	(*ProposeBlockRequest)(nil),   // 0: com.bloxroute.bsc.mev.relay.v1.ProposeBlockRequest
	(*ProposeBlockResponse)(nil),  // 1: com.bloxroute.bsc.mev.relay.v1.ProposeBlockResponse
	(*BestBidUpdate)(nil),         // 2: com.bloxroute.bsc.mev.relay.v1.BestBidUpdate
	(*ValidatorReply)(nil),        // 3: com.bloxroute.bsc.mev.relay.v1.ValidatorReply
	(*RawBid)(nil),                // 4: com.bloxroute.bsc.mev.relay.v1.RawBid
	(*BigInt)(nil),                // 5: com.bloxroute.bsc.mev.relay.v1.BigInt
	(*Hashes)(nil),                // 6: com.bloxroute.bsc.mev.relay.v1.Hashes
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 8: google.protobuf.Duration
}
var file_propose_block_message_proto_depIdxs = []int32{
	4,  // 0: com.bloxroute.bsc.mev.relay.v1.ProposeBlockRequest.raw_bid:type_name -> com.bloxroute.bsc.mev.relay.v1.RawBid
	5,  // 1: com.bloxroute.bsc.mev.relay.v1.ProposeBlockRequest.pay_bid_tx_gas_used:type_name -> com.bloxroute.bsc.mev.relay.v1.BigInt
	6,  // 2: com.bloxroute.bsc.mev.relay.v1.ProposeBlockRequest.bundle_hashes:type_name -> com.bloxroute.bsc.mev.relay.v1.Hashes
	5,  // 3: com.bloxroute.bsc.mev.relay.v1.ProposeBlockRequest.bloxroute_profit:type_name -> com.bloxroute.bsc.mev.relay.v1.BigInt
	7,  // 4: com.bloxroute.bsc.mev.relay.v1.ProposeBlockResponse.received_time:type_name -> google.protobuf.Timestamp
	3,  // 5: com.bloxroute.bsc.mev.relay.v1.ProposeBlockResponse.validator_reply:type_name -> com.bloxroute.bsc.mev.relay.v1.ValidatorReply
	2,  // 6: com.bloxroute.bsc.mev.relay.v1.ProposeBlockResponse.best_bid:type_name -> com.bloxroute.bsc.mev.relay.v1.BestBidUpdate
	5,  // 7: com.bloxroute.bsc.mev.relay.v1.BestBidUpdate.block_reward:type_name -> com.bloxroute.bsc.mev.relay.v1.BigInt
	7,  // 8: com.bloxroute.bsc.mev.relay.v1.BestBidUpdate.received_time:type_name -> google.protobuf.Timestamp
	5,  // 9: com.bloxroute.bsc.mev.relay.v1.BestBidUpdate.bloxroute_profit:type_name -> com.bloxroute.bsc.mev.relay.v1.BigInt
	8,  // 10: com.bloxroute.bsc.mev.relay.v1.ValidatorReply.sending_duration:type_name -> google.protobuf.Duration
	7,  // 11: com.bloxroute.bsc.mev.relay.v1.ValidatorReply.sent_time:type_name -> google.protobuf.Timestamp
	7,  // 12: com.bloxroute.bsc.mev.relay.v1.ValidatorReply.reply_timestamp:type_name -> google.protobuf.Timestamp
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_propose_block_message_proto_init() }
func file_propose_block_message_proto_init() {
	if File_propose_block_message_proto != nil {
		return
	}
	file_bigint_message_proto_init()
	file_hash_message_proto_init()
	file_raw_bid_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_propose_block_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_propose_block_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_propose_block_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BestBidUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_propose_block_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_propose_block_message_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ProposeBlockResponse_ValidatorReply)(nil),
		(*ProposeBlockResponse_Error)(nil),
		(*ProposeBlockResponse_BestBid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_propose_block_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_propose_block_message_proto_goTypes,
		DependencyIndexes: file_propose_block_message_proto_depIdxs,
		MessageInfos:      file_propose_block_message_proto_msgTypes,
	}.Build()
	File_propose_block_message_proto = out.File
	file_propose_block_message_proto_rawDesc = nil
	file_propose_block_message_proto_goTypes = nil
	file_propose_block_message_proto_depIdxs = nil
}
