// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mevrelaypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MevInternalServiceClient is the client API for MevInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MevInternalServiceClient interface {
	// Forward forwards a message to the next hop.
	Forward(ctx context.Context, opts ...grpc.CallOption) (MevInternalService_ForwardClient, error)
}

type mevInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMevInternalServiceClient(cc grpc.ClientConnInterface) MevInternalServiceClient {
	return &mevInternalServiceClient{cc}
}

func (c *mevInternalServiceClient) Forward(ctx context.Context, opts ...grpc.CallOption) (MevInternalService_ForwardClient, error) {
	stream, err := c.cc.NewStream(ctx, &MevInternalService_ServiceDesc.Streams[0], "/com.bloxroute.bsc.mev.relay.v1.MevInternalService/Forward", opts...)
	if err != nil {
		return nil, err
	}
	x := &mevInternalServiceForwardClient{stream}
	return x, nil
}

type MevInternalService_ForwardClient interface {
	Send(*ForwardMsg) error
	Recv() (*ForwardMsg, error)
	grpc.ClientStream
}

type mevInternalServiceForwardClient struct {
	grpc.ClientStream
}

func (x *mevInternalServiceForwardClient) Send(m *ForwardMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mevInternalServiceForwardClient) Recv() (*ForwardMsg, error) {
	m := new(ForwardMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MevInternalServiceServer is the server API for MevInternalService service.
// All implementations must embed UnimplementedMevInternalServiceServer
// for forward compatibility
type MevInternalServiceServer interface {
	// Forward forwards a message to the next hop.
	Forward(MevInternalService_ForwardServer) error
	mustEmbedUnimplementedMevInternalServiceServer()
}

// UnimplementedMevInternalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMevInternalServiceServer struct {
}

func (UnimplementedMevInternalServiceServer) Forward(MevInternalService_ForwardServer) error {
	return status.Errorf(codes.Unimplemented, "method Forward not implemented")
}
func (UnimplementedMevInternalServiceServer) mustEmbedUnimplementedMevInternalServiceServer() {}

// UnsafeMevInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MevInternalServiceServer will
// result in compilation errors.
type UnsafeMevInternalServiceServer interface {
	mustEmbedUnimplementedMevInternalServiceServer()
}

func RegisterMevInternalServiceServer(s grpc.ServiceRegistrar, srv MevInternalServiceServer) {
	s.RegisterService(&MevInternalService_ServiceDesc, srv)
}

func _MevInternalService_Forward_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MevInternalServiceServer).Forward(&mevInternalServiceForwardServer{stream})
}

type MevInternalService_ForwardServer interface {
	Send(*ForwardMsg) error
	Recv() (*ForwardMsg, error)
	grpc.ServerStream
}

type mevInternalServiceForwardServer struct {
	grpc.ServerStream
}

func (x *mevInternalServiceForwardServer) Send(m *ForwardMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mevInternalServiceForwardServer) Recv() (*ForwardMsg, error) {
	m := new(ForwardMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MevInternalService_ServiceDesc is the grpc.ServiceDesc for MevInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MevInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.bloxroute.bsc.mev.relay.v1.MevInternalService",
	HandlerType: (*MevInternalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Forward",
			Handler:       _MevInternalService_Forward_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mevinternal.proto",
}
