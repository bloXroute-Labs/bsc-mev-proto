// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mevrelaypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MevRelayClient is the client API for MevRelay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MevRelayClient interface {
	// ProposeBlock is used to propose a new block to the network.
	ProposeBlock(ctx context.Context, opts ...grpc.CallOption) (MevRelay_ProposeBlockClient, error)
	// ConfigUpdates is used to receive updates to the validator and builder configurations.
	ConfigUpdates(ctx context.Context, in *ConfigUpdatesRequest, opts ...grpc.CallOption) (MevRelay_ConfigUpdatesClient, error)
}

type mevRelayClient struct {
	cc grpc.ClientConnInterface
}

func NewMevRelayClient(cc grpc.ClientConnInterface) MevRelayClient {
	return &mevRelayClient{cc}
}

func (c *mevRelayClient) ProposeBlock(ctx context.Context, opts ...grpc.CallOption) (MevRelay_ProposeBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &MevRelay_ServiceDesc.Streams[0], "/com.bloxroute.bsc.mev.relay.v1.MevRelay/ProposeBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &mevRelayProposeBlockClient{stream}
	return x, nil
}

type MevRelay_ProposeBlockClient interface {
	Send(*ProposeBlockRequest) error
	Recv() (*ProposeBlockResponse, error)
	grpc.ClientStream
}

type mevRelayProposeBlockClient struct {
	grpc.ClientStream
}

func (x *mevRelayProposeBlockClient) Send(m *ProposeBlockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mevRelayProposeBlockClient) Recv() (*ProposeBlockResponse, error) {
	m := new(ProposeBlockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mevRelayClient) ConfigUpdates(ctx context.Context, in *ConfigUpdatesRequest, opts ...grpc.CallOption) (MevRelay_ConfigUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MevRelay_ServiceDesc.Streams[1], "/com.bloxroute.bsc.mev.relay.v1.MevRelay/ConfigUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &mevRelayConfigUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MevRelay_ConfigUpdatesClient interface {
	Recv() (*ConfigUpdatesResponse, error)
	grpc.ClientStream
}

type mevRelayConfigUpdatesClient struct {
	grpc.ClientStream
}

func (x *mevRelayConfigUpdatesClient) Recv() (*ConfigUpdatesResponse, error) {
	m := new(ConfigUpdatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MevRelayServer is the server API for MevRelay service.
// All implementations must embed UnimplementedMevRelayServer
// for forward compatibility
type MevRelayServer interface {
	// ProposeBlock is used to propose a new block to the network.
	ProposeBlock(MevRelay_ProposeBlockServer) error
	// ConfigUpdates is used to receive updates to the validator and builder configurations.
	ConfigUpdates(*ConfigUpdatesRequest, MevRelay_ConfigUpdatesServer) error
	mustEmbedUnimplementedMevRelayServer()
}

// UnimplementedMevRelayServer must be embedded to have forward compatible implementations.
type UnimplementedMevRelayServer struct {
}

func (UnimplementedMevRelayServer) ProposeBlock(MevRelay_ProposeBlockServer) error {
	return status.Errorf(codes.Unimplemented, "method ProposeBlock not implemented")
}
func (UnimplementedMevRelayServer) ConfigUpdates(*ConfigUpdatesRequest, MevRelay_ConfigUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ConfigUpdates not implemented")
}
func (UnimplementedMevRelayServer) mustEmbedUnimplementedMevRelayServer() {}

// UnsafeMevRelayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MevRelayServer will
// result in compilation errors.
type UnsafeMevRelayServer interface {
	mustEmbedUnimplementedMevRelayServer()
}

func RegisterMevRelayServer(s grpc.ServiceRegistrar, srv MevRelayServer) {
	s.RegisterService(&MevRelay_ServiceDesc, srv)
}

func _MevRelay_ProposeBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MevRelayServer).ProposeBlock(&mevRelayProposeBlockServer{stream})
}

type MevRelay_ProposeBlockServer interface {
	Send(*ProposeBlockResponse) error
	Recv() (*ProposeBlockRequest, error)
	grpc.ServerStream
}

type mevRelayProposeBlockServer struct {
	grpc.ServerStream
}

func (x *mevRelayProposeBlockServer) Send(m *ProposeBlockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mevRelayProposeBlockServer) Recv() (*ProposeBlockRequest, error) {
	m := new(ProposeBlockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MevRelay_ConfigUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MevRelayServer).ConfigUpdates(m, &mevRelayConfigUpdatesServer{stream})
}

type MevRelay_ConfigUpdatesServer interface {
	Send(*ConfigUpdatesResponse) error
	grpc.ServerStream
}

type mevRelayConfigUpdatesServer struct {
	grpc.ServerStream
}

func (x *mevRelayConfigUpdatesServer) Send(m *ConfigUpdatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MevRelay_ServiceDesc is the grpc.ServiceDesc for MevRelay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MevRelay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.bloxroute.bsc.mev.relay.v1.MevRelay",
	HandlerType: (*MevRelayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProposeBlock",
			Handler:       _MevRelay_ProposeBlock_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ConfigUpdates",
			Handler:       _MevRelay_ConfigUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mevrelay.proto",
}
